install.packages("changer")
observed_locs = cbind(runif(10000), runif(10000))
observed_field = rnorm(10000)
observed_locs = cbind(runif(10000), runif(10000))
observed_field = rnorm(10000)
X = NULL # Covariates per observation
m = 10 #number of Nearest Neighbors
nu =1.5 #Matern smoothness
anisotropic = F
sphere = F
PP = NULL
n_chains = 2  # number of MCMC chains
noise_PP = F
noise_X = NULL
noise_beta_mean = NULL
noise_beta_precision = NULL
noise_log_var_prior = NULL
range_PP = F
range_X = NULL
range_beta_mean = NULL
range_beta_precision = NULL
range_log_var_prior = NULL
seed = 1
observed_locs = cbind(runif(10000), runif(10000))
observed_field = rnorm(10000)
X = NULL # Covariates per observation
m = 10 #number of Nearest Neighbors
nu =1.5 #Matern smoothness
anisotropic = F
sphere = F
PP = NULL
n_chains = 2  # number of MCMC chains
noise_PP = F
noise_X = NULL
noise_beta_mean = NULL
noise_beta_precision = NULL
noise_log_var_prior = NULL
range_PP = F
range_X = NULL
range_beta_mean = NULL
range_beta_precision = NULL
range_log_var_prior = NULL
seed = 1
# time
t_begin = Sys.time()
# seed
set.seed(seed)
# cleansing RAM
gc()
# format
if(!is.matrix(observed_locs))stop("observed_locs should be a matrix")
# format
if(!is.matrix(observed_locs))stop("observed_locs should be a matrix")
if(!is.vector(observed_field))stop("observed_field should be a vector")
if(!is.data.frame(X) & !is.null(X))stop("X should be a data.frame or NULL")
if(!is.data.frame(noise_X) & !is.null(noise_X))stop("noise_X should be a data.frame or NULL")
if(!is.data.frame(range_X) & !is.null(range_X))stop("range_X should be a data.frame or NULL")
if((is.null(PP)) & (noise_PP | range_PP))stop("either noise_PP or range_PP is TRUE, while nothing was provided for PP")
if(!is.null(noise_beta_mean))if(!is.matrix(noise_beta_mean))stop("noise_beta_mean should be a matrix or NULL")
if(!is.null(range_beta_mean))if(!is.matrix(range_beta_mean))stop("range_beta_mean should be a matrix or NULL")
if(!is.null(noise_beta_precision))if(!is.matrix(noise_beta_precision))stop("noise_beta_precision should be a matrix or NULL")
if(!is.null(range_beta_precision))if(!is.matrix(range_beta_precision))stop("range_beta_precision should be a matrix or NULL")
#length of observations
if(
!all(unique(c(
length(observed_field),
nrow(observed_locs),
nrow(X),
nrow(noise_X),
nrow(range_X),
length(PP$idx)
)) %in% c(0, length(observed_field))
)) stop(
paste("Lengths are not matching : observed_field has", length(observed_field), "observations,",
"observed_locs has", nrow(observed_locs), "rows,",
"X has", nrow(X), "rows,",
"noise_X has", nrow(noise_X), "rows (can only be either 0 or the length of the observations),",
"range_X has", nrow(range_X), "rows (can only be either 0 or the length of the observations),",
"PP has", length(PP$idx), "locations (can only be either 0 or the length of the observations)"
)
)
if (!nu %in% c(1.5, .5))stop("only nu = 1.5 or nu = 0.5")
###############
# Re-ordering #
###############
# remove duplicated locations
duplicated_locs = duplicated (observed_locs)
locs = observed_locs[duplicated_locs==F,]
locs_reordering = order(runif(nrow(locs))); locs_reordering[seq(min(nrow(locs), 100000))] = locs_reordering[GpGp::order_maxmin(locs[locs_reordering[seq(min(nrow(locs), 100000))],])]
locs = locs[locs_reordering,]
# extracting number of locations as shortcut
n = nrow(locs)
vecchia_approx = list()
# storing numbers
vecchia_approx$n_locs = n
vecchia_approx$n_obs = length(observed_field)
# matching observed locations with reordered, unrepeated locations
locs_match = match(split(observed_locs, row(observed_locs)), split(locs, row(locs)))
vecchia_approx$locs_match = locs_match
vecchia_approx$locs_match_matrix = Matrix::sparseMatrix(i = vecchia_approx$locs_match, j = seq(vecchia_approx$n_obs), x = 1)
# doing reversed operation : for a given unrepeated location, tell which observations correspond
vecchia_approx$hctam_scol = split(seq(vecchia_approx$n_obs), locs_match)
vecchia_approx$hctam_scol_1 = sapply(vecchia_approx$hctam_scol, function(x)x[1])
# count how many observations correspond to one location
vecchia_approx$obs_per_loc = unlist(sapply(vecchia_approx$hctam_scol, length))
#extracting NNarray =  nearest neighbours for Vecchia approximation
vecchia_approx$NNarray = GpGp::find_ordered_nn(locs, m)
#computations from vecchia_approx$NNarray in order to create sparse Cholesky using Matrix::sparseMatrix
#non_NA indices from vecchia_approx$NNarray
vecchia_approx$NNarray_non_NA = !is.na(vecchia_approx$NNarray)
#column idx of the uncompressed sparse Cholesky factor
vecchia_approx$sparse_chol_column_idx = vecchia_approx$NNarray[vecchia_approx$NNarray_non_NA]
#row idx of the uncompressed sparse Cholesky factor
vecchia_approx$sparse_chol_row_idx = row(vecchia_approx$NNarray)[vecchia_approx$NNarray_non_NA]
### # adjacency matrix of MRF
### vecchia_approx$MRF_adjacency_mat =  Matrix::crossprod(Matrix::sparseMatrix(i = vecchia_approx$sparse_chol_row_idx, j = vecchia_approx$sparse_chol_column_idx, x = 1))
### # stupid trick to coerce adjacency matrix format...
### vecchia_approx$MRF_adjacency_mat[1, 2] = 0
### vecchia_approx$MRF_adjacency_mat[1, 2] = 1
### vecchia_approx$MRF_adjacency_mat@x = rep(1, length(vecchia_approx$MRF_adjacency_mat@x))
#vecchia_approx$coloring = naive_greedy_coloring(vecchia_approx$MRF_adjacency_mat)
# duplicated locs
vecchia_approx$duplicated_locs = duplicated_locs
# partition of locs for field update
cl = parallel::makeCluster(max(1, parallel::detectCores()-2))
parallel::clusterExport(cl = cl, varlist = c("locs", "n"), envir = environment())
vecchia_approx$locs_partition = parallel::parSapply(
cl = cl,
round(seq(n/10000+1, 2*(n/10000)+1, length.out = min(20, ceiling(n/10000)))), function(i)
{
kmeans(locs, centers = i, iter.max = 200,  algorithm = "Hartigan-Wong")$cluster
})
parallel::stopCluster(cl)
vecchia_approx$locs_partition
d
##############
# covariates #
##############
covariates = list()
# fixed effects for response
covariates$X = process_covariates(X, observed_locs, vecchia_approx)
# explicit PP basis
explicit_PP_basis = NULL
process_covariates = function(X, observed_locs, vecchia_approx, explicit_PP_basis = NULL, use_PP = F)
{
# covariates in the observed field #
res = list()
# creating model matrix
# extracting a model matrix and storing the original argument
if(!is.null(X))
{
res$arg = X
res$X = model.matrix(~., X)
}
# extracting a model matrix with only intercept and storing a message about the lack of original argument if no X is provided
if(is.null(X))
{
res$arg = "No covariates were provided"
res$X = matrix(model.matrix(~., as.data.frame(rep(1, nrow(observed_locs))))[,-1], nrow(observed_locs))
colnames(res$X) = "(Intercept)"
}
X_ = res$X
if(use_PP) X_ = cbind(res$X, explicit_PP_basis)
# pre- computing XTX
crossprod_X = crossprod(X_)
res$chol_crossprod_X = chol(crossprod_X)
res$n_regressors = ncol(res$X)
# identifying  which X do not vary within location
res$which_locs = c()
for(i in seq(ncol(res$X)))
{
if(all(duplicated(cbind(observed_locs, res$X[,i])) == vecchia_approx$duplicated_locs)) res$which_locs = c(res$which_locs, i)
}
res$X_locs = matrix(res$X[vecchia_approx$hctam_scol_1,res$which_locs], ncol = length(res$which_locs))
colnames(res$X_locs) = colnames(res$X)[res$which_locs]
X_locs_ = res$X_locs
if(use_PP)X_locs_ = cbind(X_locs_, explicit_PP_basis[vecchia_approx$hctam_scol_1,])
res$crossprod_X_locs = crossprod(X_locs_)
res$chol_crossprod_X_locs = chol(res$crossprod_X_locs)
#res$chol_crossprod_X_locs = (eigen(res$crossprod_X_locs)$val^.5) * t(eigen(res$crossprod_X_locs)$vec)
res
}
##############
# covariates #
##############
covariates = list()
# fixed effects for response
covariates$X = process_covariates(X, observed_locs, vecchia_approx)
# explicit PP basis
explicit_PP_basis = NULL
if(!is.null(PP))explicit_PP_basis = X_PP_mult_right(PP = PP, use_PP = T, Y = diag(1, nrow(PP$knots), nrow(PP$knots)))
# fixed effects and PP for range
covariates$range_X = process_covariates(range_X, observed_locs, vecchia_approx, explicit_PP_basis, range_PP)
if(!identical(covariates$range_X$which_locs, seq(ncol(covariates$range_X$X_locs))))stop("The covariates range_X cannot vary within one spatial location of observed_locs")
# fixed effects and PP for noise
covariates$noise_X = process_covariates(noise_X, observed_locs, vecchia_approx, explicit_PP_basis, noise_PP)
# explicit PP basis removal
remove(explicit_PP_basis)
hierarchical_model = list()
hierarchical_model$anisotropic = anisotropic
hierarchical_model$sphere = sphere
hierarchical_model$nu = nu
hierarchical_model$beta_priors = list()
hierarchical_model$PP = PP
if(is.null(hierarchical_model$PP)) hierarchical_model$PP = list("n_PP" = 0)
hierarchical_model$noise_PP = noise_PP
hierarchical_model$range_PP = range_PP
if(is.null(noise_log_var_prior)&noise_PP)
{
message("noise_log_var_prior was automatically set to an uniform on (-6, 2)")
noise_log_var_prior = c(-6, 2)
}
if(!is.null(noise_log_var_prior))hierarchical_model$noise_log_var_prior = matrix(noise_log_var_prior)
if(is.null(range_log_var_prior)&range_PP)
{
message("range_log_var_prior was automatically set to an uniform on (-6, 2)")
hierarchical_model$range_log_var_prior = c(-6, 2)
}
if(!is.null(range_log_var_prior))hierarchical_model$range_log_var_prior = matrix(range_log_var_prior)
# OLS to get residual variance to make a guess
naive_ols =  lm(observed_field~covariates$X$X-1)
lm_fit = as.vector(covariates$X$X%*%matrix(naive_ols$coefficients, ncol = 1))
lm_residuals = as.vector(observed_field- lm_fit)
log_gp_var_prior = NULL
sum(is.numeric(c(1,1)))
sum(is.numeric(c(1,T)))
is.numeric(c(1,T))
is.double(c(1,T))
is.double(c(1,"T"))
is.numeric(c(1,"T"))
log(100)
log(var(lm_residuals))
observed_field
var(observed_field)
log(var(lm_residuals))
log(var(lm_residuals))-log(100)
hierarchical_model$log_gp_var_prior = sort(hierarchical_model$log_gp_var_prior)
hierarchical_model$log_gp_var_prior
if(is.null(log_gp_var_prior))hierarchical_model$log_gp_var_prior = c(log(var(lm_residuals))-log(100), log(var(lm_residuals)))
hierarchical_model$log_gp_var_prior
# OLS to get residual variance to make a guess
naive_ols =  lm(observed_field~covariates$X$X-1)
lm_fit = as.vector(covariates$X$X%*%matrix(naive_ols$coefficients, ncol = 1))
lm_residuals = as.vector(observed_field- lm_fit)
if(is.null(log_gp_var_prior))hierarchical_model$log_gp_var_prior = c(log(var(lm_residuals))-log(100), log(var(lm_residuals)))
hierarchical_model$log_gp_var_prior = sort(hierarchical_model$log_gp_var_prior)
hierarchical_model$beta_priors$noise_beta_mean = noise_beta_mean
hierarchical_model$beta_priors$range_beta_mean = range_beta_mean
# Default mean prior computed from a reasonable case.
# The intercept is set to reasonable value and the rest is set to 0
if(is.null(noise_beta_mean)) hierarchical_model$beta_priors$noise_beta_mean = matrix(c(log(var(lm_residuals)) - log(2),                     rep(0, covariates$noise_X$n_regressors-1)), ncol=1)
if(is.null(range_beta_mean)) hierarchical_model$beta_priors$range_beta_mean = matrix(0, covariates$range_X$n_regressors, 1 + 2*anisotropic)
hierarchical_model$beta_priors$range_beta_mean[1,1] = c(log(max(dist(locs[seq(1000), seq(2)])))-log(50))
hierarchical_model$beta_priors$noise_beta_precision = noise_beta_precision
hierarchical_model$beta_priors$range_beta_precision = range_beta_precision
if(is.null(noise_beta_precision)) hierarchical_model$beta_priors$noise_beta_precision =diag(.01, covariates$noise_X$n_regressors, covariates$noise_X$n_regressors)
if(is.null(range_beta_precision))
{
hierarchical_model$beta_priors$range_beta_precision = diag(.01, covariates$range_X$n_regressors, covariates$range_X$n_regressors)
hierarchical_model$beta_priors$range_beta_precision = hierarchical_model$beta_priors$range_beta_precision %x% diag(1, (1+2*anisotropic))
}
