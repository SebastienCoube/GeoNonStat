% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/initialize.R
\name{initialize}
\alias{initialize}
\title{initialize TODO Title}
\usage{
initialize(
  observed_locs = NULL,
  observed_field = NULL,
  X = NULL,
  m = 10,
  nu = 1.5,
  anisotropic = F,
  sphere = F,
  PP = NULL,
  n_chains = 2,
  noise_PP = F,
  noise_X = NULL,
  noise_log_scale_prior = NULL,
  scale_PP = F,
  scale_X = NULL,
  scale_log_scale_prior = NULL,
  range_PP = F,
  range_X = NULL,
  range_log_scale_prior = NULL,
  seed = 1
)
}
\arguments{
\item{observed_locs}{a matrix of spatial coordinates where observations are done}

\item{observed_field}{a vector of observations of the interest variable}

\item{X}{a data.frame of covariates explaining the interest variable through fixed linear effects}

\item{m}{number of nearest neighbors to do Vecchia's approximation}

\item{nu}{Matern smoothness, either 0.5 or 1.5}

\item{anisotropic}{anisotropic covariance}

\item{sphere}{Boolean, indicating lon-lat data}

\item{PP}{TODO}

\item{n_chains}{TODO}

\item{noise_PP}{TODO}

\item{noise_X}{a data.frame of covariates explaining the Gaussian noise variance through fixed linear effects}

\item{noise_log_scale_prior}{1 times 2 matrix for the prior on the log-variance of the noise PP field.}

\item{scale_PP}{}

\item{scale_X}{a data.frame of covariates explaining the Gaussian process marginal variance through fixed linear effects}

\item{scale_log_scale_prior}{1 times 2 matrix for the prior on the log-variance of the scale PP field.}

\item{range_PP}{TODO}

\item{range_X}{a data.frame of covariates explaining the Gaussian process range through fixed linear effects}

\item{range_log_scale_prior}{1 times 2 matrix for the prior on the log-variance of the range PP field. #' In the case of anisotropic range, input an 3 times 2 matrix, indicating bounds for the eigenvalues of the trivariate log-variance matrix.}

\item{seed}{TODO}
}
\value{
a list
}
\description{
initialize TODO Title
}
\examples{
set.seed(100)
locs = cbind(runif(10000), runif(10000))
PP = get_PP(
  observed_locs = locs[seq(10000),], # spatial sites
  matern_range = .1,
  n_PP = 50, # number of knots
  m = 15 # number of NNGP parents
)
range_beta = rbind(c(-4, 0, 0), # intercept
                   matrix(.5*rnorm(150), 50)
                   ) \%*\% diag(c(1, 2,.5))
NNarray_aniso = GpGp::find_ordered_nn(locs[seq(10000),], 10)

# getting the coefficients
chol_precision = compute_sparse_chol(
    range_beta = range_beta, # range parameters
    NNarray = NNarray_aniso, # Vecchia approx DAG
    locs = locs[seq(10000),], # spatial coordinates
    range_X = matrix(1, 10000), # covariates for the range (just an intercept)
    PP = PP, use_PP = T, # predictive process
    nu = 1.5, # smoothness
    anisotropic = T # anisotropy
  )[[1]]
# putting coefficients in precision Cholesly
chol_precision = Matrix::sparseMatrix(
  x = chol_precision[!is.na(NNarray_aniso)], 
  i = row(NNarray_aniso)[!is.na(NNarray_aniso)], 
  j = (NNarray_aniso)[!is.na(NNarray_aniso)], 
  triangular = T
)
# sampling the anisotropic process
seed_vector = rnorm(10000)
aniso_latent_field = as.vector(Matrix::solve(chol_precision, seed_vector)) 
aniso_observed_field = aniso_latent_field + .8*rnorm(10000)
#plot_pointillist_painting(locs, aniso_latent_field)
MCMC_NNGP = initialize(
  observed_locs = locs[seq(10000),], observed_field = aniso_observed_field, 
  nu = 1.5, n_chains = 5,
  range_PP = T, PP = PP, # use PP for range
  anisotropic = T # Covariance will be anisotropic
)
}
